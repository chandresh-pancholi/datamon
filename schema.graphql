# Top-Level query object as entry point to the graphq query
type Query {
    # List the repositories known by datamon
    repositories: [Repository!]!
    # Get a repository by name
    repository(name: String!): Repository
}

# All the available methods for creating, updating and deleting data.
type Mutation {
  # Create an empty repository in the server
  createRepository(repo: RepositoryInput!): Repository

  # Create a new bundle from a changeset and a message
  createBundle(params: BundleInput!): Bundle

  # Delete a repository from the server, this will only be possible if there are no dependencies
  # on this repository anymore
  deleteRepository(id: ID!): Repository

  # Delete a branch from the repository, this will only be possible if there are no dependencies
  # on this branch anywhere
  deleteBranch(repository: ID!, branch: String!): String

  # Delete a tag from the repository, this will only be possible if there are no dependencies
  # on this tag anywhere
  deleteTag(repository: ID!, tag: String!): String
}

# A repository contains a group of files that are versioned over time.
#
# Repositories can contain several different diverging timelines. It's helpful to think about repositories as topics.
type Repository {

    # Name of the repository, this needs to be a DNS safe name.
    name: String!

    # A description of what the repository is about.
    # This field accepts github flavored markdown.
    description: String

    # The default branch for this repository
    defaultBranch: String!

    # Tagged bundles, if any of the repository.
    #
    # A tag represents a fixed point in history for a repository.
    # Tags are expected to be stable and never change once they've been published.
    #
    # For consumers of a tag it is important that they can depend on the tag always being the same.
    tags: [BundleRef!]

    # Branches, if any of the repository.
    #
    # A branch represents a pointer to the top of a particular timeline.
    # Branches can be seen as alternative timelines for a particular topic.
    branches: [BundleRef!]

    # Get a bundle by id, the id can be a bundle id, a branch or tag name.
    bundle(id: ID!): Bundle

    # Get a snapshot for a bundle by id. The id can be a snapshot id or a bundle id
    snapshot(id: ID!): Snapshot
}

# Input required to create a new, empty repository
input RepositoryInput {

    # A unique name for the repository, this needs to be a DNS safe name
    #
    # So no longer than 53 characters and [a-zA-Z0-9-]+
    name: String!

    # An optional description of what the repository is about.
    #
    # This field accepts github flavored markdown.
    description: String
}

# The possible types a name can be for
enum NameType {
    # Detached for when a bundle ref refers to an unnamed bundle
    Detached
    # Branch for when the name refers to a branch
    Branch
    # Tag for when the name refers to a tag
    Tag
}

# A name for bundle refs
type Named {
    # The name of ref
    value: String!

    # The type of the name
    type: NameType!
}

# A bundle reference is a pointer to a bundle id, with an optional name
type BundleRef {
    # The id of the bundle
    id: ID!

    # The name of the bundle, when provided
    name: Named
}

# Input parameters for creating a new bundle
input BundleInput {
  # The repository to create the bundle in
  repository: ID!

  # The branch to create the bundle for
  branch: ID

  # The message that describes the changes for this bundle
  message: String!

  # The changes made to the bundle
  changes: ChangeSetInput
}

# Captures the changes made to the file tree of a snapshot as a snapshot
input ChangeSetInput {
    # Added files, so newly created ones
    added: [ObjectInput!]
    # Deleted files, so files that dissappeared
    deleted: [ObjectInput!]
}

# A versioned object. This is identified by the hash of its content.
input ObjectInput {

    # The hash of the content that should appear at the given path
    id: ID!

    # The path of the file within the workspace
    path: String!

    # The time this file was last modified
    mtime: Time!

    # The unix file permissions (eg: 0644)
    mode: String
}



# A bundle represents a change set with some metadata about how created it
# and where it's located in the timeline
type Bundle {
    # The ID of the bundle.
    #
    # This is created from the timestamp, the parent hashes,
    # the root hash of the change set and the message.
    id: ID!

    # The bundle message that describes what went in this bundle.
    message: String

    # The parents to this bundle.
    parents: [Bundle]

    # The changes to the repository in this bundle
    changes: ChangeSet!

    # The timestamp for when this bundle was made
    timestamp: Time!
}

# A snapshot represents the composed list of paths in a workspace
# for materializing.
type Snapshot {
  # The ID of the snapshot
  id: ID!

  # The parent snapshots to this one
  parents: [String!]

  # The bundle ID that this snapshot represents
  bundle: String

  # The parent bundles that went into this snapshots bundle
  previousCommits: [String!]

  # The objects contained in the snapshot
  objects: [VersionedObject!]!

  # The time this snaphost was created
  timestamp: Time!
}

# A versioned object. This is identified by the hash of its content.
type VersionedObject {

    # The hash of the content that should appear at the given path
    id: ID!

    # The path of the file within the workspace
    path: String!

    # The time this file was last modified
    mtime: Time!

    # The unix file permissions (eg: 0644)
    mode: String
}

# Captures the changes made to the file tree of a snapshot
type ChangeSet {
    # Added files, so newly created ones
    added: [VersionedObject!]
    # Deleted files, so files that dissappeared
    deleted: [VersionedObject!]
}

# A contributor to an element in Datamon
#
# Both fields are required so that we always know who made the changes to the files
type Contributor {
    # Name of the contributor
    name: String!
    # Email address of the contributor
    email: String!
}

# Represents an ISO-8601 date
scalar Time
