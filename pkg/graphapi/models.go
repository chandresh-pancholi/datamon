// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package graphapi

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
	time "time"
)

type Bundle struct {
	ID        string    `json:"id"`
	Message   *string   `json:"message"`
	Parents   []*Bundle `json:"parents"`
	Changes   ChangeSet `json:"changes"`
	Timestamp time.Time `json:"timestamp"`
}
type BundleInput struct {
	Branch  *string         `json:"branch"`
	Message string          `json:"message"`
	Changes *ChangeSetInput `json:"changes"`
}
type BundleRef struct {
	ID   string `json:"id"`
	Name *Named `json:"name"`
}
type ChangeSet struct {
	Added   []VersionedObject `json:"added"`
	Deleted []VersionedObject `json:"deleted"`
}
type ChangeSetInput struct {
	Added   []ObjectInput `json:"added"`
	Deleted []ObjectInput `json:"deleted"`
}
type Contributor struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}
type Named struct {
	Value string   `json:"value"`
	Type  NameType `json:"type"`
}
type ObjectInput struct {
	ID    string    `json:"id"`
	Path  string    `json:"path"`
	Mtime time.Time `json:"mtime"`
	Mode  *string   `json:"mode"`
}
type Repository struct {
	Name          string      `json:"name"`
	Description   *string     `json:"description"`
	DefaultBranch string      `json:"defaultBranch"`
	Tags          []BundleRef `json:"tags"`
	Branches      []BundleRef `json:"branches"`
	Bundle        *Bundle     `json:"bundle"`
	Snapshot      *Snapshot   `json:"snapshot"`
}
type RepositoryInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}
type Snapshot struct {
	ID              string            `json:"id"`
	Parents         []string          `json:"parents"`
	Bundle          *string           `json:"bundle"`
	PreviousCommits []string          `json:"previousCommits"`
	Objects         []VersionedObject `json:"objects"`
	Timestamp       time.Time         `json:"timestamp"`
}
type VersionedObject struct {
	ID    string    `json:"id"`
	Path  string    `json:"path"`
	Mtime time.Time `json:"mtime"`
	Mode  *string   `json:"mode"`
}

type NameType string

const (
	// Detached for when a bundle ref refers to an unnamed bundle
	NameTypeDetached NameType = "Detached" // Branch for when the name refers to a branch
	NameTypeBranch   NameType = "Branch"   // Tag for when the name refers to a tag
	NameTypeTag      NameType = "Tag"
)

func (e NameType) IsValid() bool {
	switch e {
	case NameTypeDetached, NameTypeBranch, NameTypeTag:
		return true
	}
	return false
}

func (e NameType) String() string {
	return string(e)
}

func (e *NameType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NameType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NameType", str)
	}
	return nil
}

func (e NameType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
